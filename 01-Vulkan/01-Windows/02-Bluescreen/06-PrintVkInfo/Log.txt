WinMain()-> Program started successfully
FillInstanceExtensionNames(): First call to vkEnumerateInstanceExtensionProperties() succedded
FillInstanceExtensionNames(): Second call to vkEnumerateInstanceExtensionProperties() succedded
FillInstanceExtensionNames(): Vulkan Extension Name = VK_KHR_device_group_creation
FillInstanceExtensionNames(): Vulkan Extension Name = VK_KHR_external_fence_capabilities
FillInstanceExtensionNames(): Vulkan Extension Name = VK_KHR_external_memory_capabilities
FillInstanceExtensionNames(): Vulkan Extension Name = VK_KHR_external_semaphore_capabilities
FillInstanceExtensionNames(): Vulkan Extension Name = VK_KHR_get_physical_device_properties2
FillInstanceExtensionNames(): Vulkan Extension Name = VK_KHR_get_surface_capabilities2
FillInstanceExtensionNames(): Vulkan Extension Name = VK_KHR_surface
FillInstanceExtensionNames(): Vulkan Extension Name = VK_KHR_surface_protected_capabilities
FillInstanceExtensionNames(): Vulkan Extension Name = VK_KHR_win32_surface
FillInstanceExtensionNames(): Vulkan Extension Name = VK_EXT_debug_report
FillInstanceExtensionNames(): Vulkan Extension Name = VK_EXT_debug_utils
FillInstanceExtensionNames(): Vulkan Extension Name = VK_EXT_surface_maintenance1
FillInstanceExtensionNames(): Vulkan Extension Name = VK_EXT_swapchain_colorspace
FillInstanceExtensionNames(): Vulkan Extension Name = VK_NV_external_memory_capabilities
FillInstanceExtensionNames(): Vulkan Extension Name = VK_KHR_portability_enumeration
FillInstanceExtensionNames(): Vulkan Extension Name = VK_LUNARG_direct_driver_loading
FillInstanceExtensionNames(): VK_KHR_SURFACE_EXTENSION_NAME is found
FillInstanceExtensionNames(): VK_KHR_WIN32_SURFACE_EXTENSION_NAME is found
FillInstanceExtensionNames(): Enabled Vulkan Instance Extension Name = VK_KHR_surface
FillInstanceExtensionNames(): Enabled Vulkan Instance Extension Name = VK_KHR_win32_surface
CreateVulkanInstance(): FillInstanceExtensionNames() succedded
CreateVulkanInstance(): vkCreateInstance() succedded
initialize(): CreateVulkanInstance() succedded
GetSupportedSurface(): vkCreateWin32SurfaceKHR() succedded
initialize(): GetSupportedSurface() succedded
GetPhysicalDevice(): vkEnumeratePhysicalDevices() first call succedded
GetPhysicalDevice(): vkEnumeratePhysicalDevices() second call succedded
GetPhysicalDevice(): succedded to free isQuequeSurfaceSupported_array
GetPhysicalDevice(): succedded to free vkQueueFamilyProperties_array
GetPhysicalDevice(): GetPhysicalDevice() suceeded to select required physical device with graphics enabled
GetPhysicalDevice(): Supported physical device supports tessellation shader
GetPhysicalDevice(): Supported physical device supports geometry shader
initialize(): GetPhysicalDevice() succedded
************************* Shree Ganesha******************************
apiVersion = 1.3.215
deviceName = Intel(R) UHD Graphics 630
deviceType = Integrated GPU (iGPU)
vendorID = 0x8086
deviceID = 0x3e98
apiVersion = 1.4.303
deviceName = NVIDIA GeForce RTX 2070
deviceType = Discrete GPU (dGPU)
vendorID = 0x10de
deviceID = 0x1f02
PrintVkInfo(): succedded to free vkPhysicalDevice_array
initialize(): PrintVulkanInfo() succedded
WinMain(): initialize() succedded
uninitialize(): vkDestroySurfaceKHR() sucedded
uninitialize(): vkDestroyInstance() sucedded
uninitialize()-> Program ended successfully.
